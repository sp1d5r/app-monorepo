{"version":3,"file":"vendors-node_modules_tamagui_button_dist_esm_Button_mjs-node_modules_tamagui_shorthands_dist_-f03cd4.iframe.bundle.js","mappingsvOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACJA;AACA;AACA;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@app-monorepo/storybook/../../node_modules/@tamagui/button/dist/esm/Button.mjs","webpack://@app-monorepo/storybook/../../node_modules/@tamagui/font-size/dist/esm/getFontSize.mjs","webpack://@app-monorepo/storybook/../../node_modules/@tamagui/get-button-sized/dist/esm/index.mjs","webpack://@app-monorepo/storybook/../../node_modules/@tamagui/get-font-sized/dist/esm/index.mjs","webpack://@app-monorepo/storybook/../../node_modules/@tamagui/get-token/dist/esm/index.mjs","webpack://@app-monorepo/storybook/../../node_modules/@tamagui/helpers-tamagui/dist/esm/index.mjs","webpack://@app-monorepo/storybook/../../node_modules/@tamagui/helpers-tamagui/dist/esm/prevent.mjs","webpack://@app-monorepo/storybook/../../node_modules/@tamagui/helpers-tamagui/dist/esm/useCurrentColor.mjs","webpack://@app-monorepo/storybook/../../node_modules/@tamagui/helpers-tamagui/dist/esm/useGetThemedIcon.mjs","webpack://@app-monorepo/storybook/../../node_modules/@tamagui/shorthands/dist/esm/index.mjs","webpack://@app-monorepo/storybook/../../node_modules/@tamagui/stacks/dist/esm/NestingContext.mjs","webpack://@app-monorepo/storybook/../../node_modules/@tamagui/stacks/dist/esm/ThemeableStack.mjs","webpack://@app-monorepo/storybook/../../node_modules/@tamagui/stacks/dist/esm/variants.mjs","webpack://@app-monorepo/storybook/../../node_modules/@tamagui/text/dist/esm/SizableText.mjs","webpack://@app-monorepo/storybook/../../node_modules/@tamagui/text/dist/esm/wrapChildrenInText.mjs"],"sourcesContent":["import { getFontSize } from \"@tamagui/font-size\";\nimport { getButtonSized } from \"@tamagui/get-button-sized\";\nimport { withStaticProperties } from \"@tamagui/helpers\";\nimport { useGetThemedIcon } from \"@tamagui/helpers-tamagui\";\nimport { ButtonNestingContext, ThemeableStack } from \"@tamagui/stacks\";\nimport { SizableText, wrapChildrenInText } from \"@tamagui/text\";\nimport { createStyledContext, getVariableValue, spacedChildren, styled, useProps } from \"@tamagui/web\";\nimport { useContext } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nconst ButtonContext = createStyledContext({\n    // keeping these here means they work with styled() passing down color to text\n    color: void 0,\n    ellipse: void 0,\n    fontFamily: void 0,\n    fontSize: void 0,\n    fontStyle: void 0,\n    fontWeight: void 0,\n    letterSpacing: void 0,\n    maxFontSizeMultiplier: void 0,\n    size: void 0,\n    textAlign: void 0,\n    variant: void 0\n  }),\n  BUTTON_NAME = \"Button\",\n  ButtonFrame = styled(ThemeableStack, {\n    name: BUTTON_NAME,\n    tag: \"button\",\n    context: ButtonContext,\n    role: \"button\",\n    focusable: !0,\n    variants: {\n      unstyled: {\n        false: {\n          size: \"$true\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          flexWrap: \"nowrap\",\n          flexDirection: \"row\",\n          cursor: \"pointer\",\n          hoverTheme: !0,\n          pressTheme: !0,\n          backgrounded: !0,\n          borderWidth: 1,\n          borderColor: \"transparent\",\n          focusVisibleStyle: {\n            outlineColor: \"$outlineColor\",\n            outlineStyle: \"solid\",\n            outlineWidth: 2\n          }\n        }\n      },\n      variant: {\n        outlined: {\n          backgroundColor: \"transparent\",\n          borderWidth: 2,\n          borderColor: \"$borderColor\",\n          hoverStyle: {\n            backgroundColor: \"transparent\",\n            borderColor: \"$borderColorHover\"\n          },\n          pressStyle: {\n            backgroundColor: \"transparent\",\n            borderColor: \"$borderColorPress\"\n          },\n          focusVisibleStyle: {\n            backgroundColor: \"transparent\",\n            borderColor: \"$borderColorFocus\"\n          }\n        }\n      },\n      size: {\n        \"...size\": getButtonSized,\n        \":number\": getButtonSized\n      },\n      disabled: {\n        true: {\n          pointerEvents: \"none\"\n        }\n      }\n    },\n    defaultVariants: {\n      unstyled: process.env.TAMAGUI_HEADLESS === \"1\"\n    }\n  }),\n  ButtonText = styled(SizableText, {\n    name: \"Button\",\n    context: ButtonContext,\n    variants: {\n      unstyled: {\n        false: {\n          userSelect: \"none\",\n          cursor: \"pointer\",\n          // flexGrow 1 leads to inconsistent native style where text pushes to start of view\n          flexGrow: 0,\n          flexShrink: 1,\n          ellipse: !0,\n          color: \"$color\"\n        }\n      }\n    },\n    defaultVariants: {\n      unstyled: process.env.TAMAGUI_HEADLESS === \"1\"\n    }\n  }),\n  ButtonIcon = props => {\n    const {\n        children,\n        scaleIcon = 1\n      } = props,\n      {\n        size,\n        color\n      } = useContext(ButtonContext),\n      iconSize = (typeof size == \"number\" ? size * 0.5 : getFontSize(size)) * scaleIcon;\n    return useGetThemedIcon({\n      size: iconSize,\n      color\n    })(children);\n  },\n  ButtonComponent = ButtonFrame.styleable(function (props, ref) {\n    const {\n      props: buttonProps\n    } = useButton(props);\n    return /* @__PURE__ */jsx(ButtonFrame, {\n      \"data-disable-theme\": !0,\n      ...buttonProps,\n      ref\n    });\n  }),\n  Button2 = withStaticProperties(ButtonComponent, {\n    Text: ButtonText,\n    Icon: ButtonIcon\n  });\nfunction useButton({\n  textProps,\n  ...propsIn\n}, {\n  Text = Button2.Text\n} = {\n  Text: Button2.Text\n}) {\n  const isNested = useContext(ButtonNestingContext),\n    propsActive = useProps(propsIn, {\n      noNormalize: !0,\n      noExpand: !0\n    }),\n    {\n      icon,\n      iconAfter,\n      space,\n      spaceFlex,\n      scaleIcon = 1,\n      scaleSpace = 0.66,\n      separator,\n      noTextWrap,\n      fontFamily,\n      fontSize,\n      fontWeight,\n      fontStyle,\n      letterSpacing,\n      tag,\n      ellipse,\n      maxFontSizeMultiplier,\n      ...restProps\n    } = propsActive,\n    size = propsActive.size || (propsActive.unstyled ? void 0 : \"$true\"),\n    color = propsActive.color,\n    iconSize = (typeof size == \"number\" ? size * 0.5 : getFontSize(size, {\n      font: fontFamily?.[0] === \"$\" ? fontFamily : void 0\n    })) * scaleIcon,\n    getThemedIcon = useGetThemedIcon({\n      size: iconSize,\n      color\n    }),\n    [themedIcon, themedIconAfter] = [icon, iconAfter].map(getThemedIcon),\n    spaceSize = space ?? getVariableValue(iconSize) * scaleSpace,\n    contents = noTextWrap ? [propsIn.children] : wrapChildrenInText(Text, {\n      children: propsIn.children,\n      fontFamily,\n      fontSize,\n      textProps,\n      fontWeight,\n      fontStyle,\n      letterSpacing,\n      ellipse,\n      maxFontSizeMultiplier\n    }, Text === ButtonText && propsActive.unstyled !== !0 ? {\n      unstyled: process.env.TAMAGUI_HEADLESS === \"1\",\n      size\n    } : void 0),\n    inner = spacedChildren({\n      // a bit arbitrary but scaling to font size is necessary so long as button does\n      space: spaceSize === !1 ? 0 : spaceSize == !0 ? \"$true\" : spaceSize,\n      spaceFlex,\n      ensureKeys: !0,\n      separator,\n      direction: propsActive.flexDirection === \"column\" || propsActive.flexDirection === \"column-reverse\" ? \"vertical\" : \"horizontal\",\n      // for keys to stay the same we keep indices as similar a possible\n      // so even if icons are undefined we still pass them\n      children: [themedIcon, ...contents, themedIconAfter]\n    }),\n    props = {\n      size,\n      ...(propsIn.disabled && {\n        // in rnw - false still has keyboard tabIndex, undefined = not actually focusable\n        focusable: void 0,\n        // even with tabIndex unset, it will keep focusVisibleStyle on web so disable it here\n        focusVisibleStyle: {\n          borderColor: \"$background\"\n        }\n      }),\n      // fixes SSR issue + DOM nesting issue of not allowing button in button\n      tag: tag ?? (isNested ? \"span\" :\n      // defaults to <a /> when accessibilityRole = link\n      // see https://github.com/tamagui/tamagui/issues/505\n      propsActive.accessibilityRole === \"link\" || propsActive.role === \"link\" ? \"a\" : \"button\"),\n      ...restProps,\n      children: /* @__PURE__ */jsx(ButtonNestingContext.Provider, {\n        value: !0,\n        children: inner\n      }),\n      // forces it to be a runtime pressStyle so it passes through context text colors\n      disableClassName: !0\n    };\n  return {\n    spaceSize,\n    isNested,\n    props\n  };\n}\nexport { Button2 as Button, ButtonContext, ButtonFrame, ButtonIcon, ButtonText, useButton };\n//# sourceMappingURL=Button.mjs.map\n","import { getConfig, isVariable } from \"@tamagui/core\";\nconst getFontSize = (inSize, opts) => {\n    const res = getFontSizeVariable(inSize, opts);\n    return isVariable(res) ? +res.val : res ? +res : 16;\n  },\n  getFontSizeVariable = (inSize, opts) => {\n    const token = getFontSizeToken(inSize, opts);\n    if (!token) return inSize;\n    const conf = getConfig();\n    return conf.fontsParsed[opts?.font || conf.defaultFontToken]?.size[token];\n  },\n  getFontSizeToken = (inSize, opts) => {\n    if (typeof inSize == \"number\") return null;\n    const relativeSize = opts?.relativeSize || 0,\n      conf = getConfig(),\n      fontSize = conf.fontsParsed[opts?.font || conf.defaultFontToken]?.size ||\n      // fallback to size tokens\n      conf.tokensParsed.size,\n      size = (inSize === \"$true\" && !(\"$true\" in fontSize) ? \"$4\" : inSize) ?? (\"$true\" in fontSize ? \"$true\" : \"$4\"),\n      sizeTokens = Object.keys(fontSize);\n    let foundIndex = sizeTokens.indexOf(size);\n    foundIndex === -1 && size.endsWith(\".5\") && (foundIndex = sizeTokens.indexOf(size.replace(\".5\", \"\"))), process.env.NODE_ENV === \"development\" && foundIndex === -1 && console.warn(\"No font size found\", size, opts, \"in size tokens\", sizeTokens);\n    const tokenIndex = Math.min(Math.max(0, foundIndex + relativeSize), sizeTokens.length - 1);\n    return sizeTokens[tokenIndex] ?? size;\n  };\nexport { getFontSize, getFontSizeToken, getFontSizeVariable };\n//# sourceMappingURL=getFontSize.mjs.map\n","import { getSpace } from \"@tamagui/get-token\";\nconst getButtonSized = (val, {\n  tokens,\n  props\n}) => {\n  if (!val || props.circular) return;\n  if (typeof val == \"number\") return {\n    paddingHorizontal: val * 0.25,\n    height: val,\n    borderRadius: props.circular ? 1e5 : val * 0.2\n  };\n  const xSize = getSpace(val),\n    radiusToken = tokens.radius[val] ?? tokens.radius.$true;\n  return {\n    paddingHorizontal: xSize,\n    height: val,\n    borderRadius: props.circular ? 1e5 : radiusToken\n  };\n};\nexport { getButtonSized };\n//# sourceMappingURL=index.mjs.map\n","import { isClient } from \"@tamagui/constants\";\nimport { getTokens } from \"@tamagui/core\";\nconst getFontSized = (sizeTokenIn = \"$true\", {\n    font,\n    fontFamily,\n    props\n  }) => {\n    if (!font) return {\n      fontSize: sizeTokenIn\n    };\n    const sizeToken = sizeTokenIn === \"$true\" ? getDefaultSizeToken(font) : sizeTokenIn,\n      style = {},\n      fontSize = font.size[sizeToken],\n      lineHeight = font.lineHeight?.[sizeToken],\n      fontWeight = font.weight?.[sizeToken],\n      letterSpacing = font.letterSpacing?.[sizeToken],\n      textTransform = font.transform?.[sizeToken],\n      fontStyle = props.fontStyle ?? font.style?.[sizeToken],\n      color = props.color ?? font.color?.[sizeToken];\n    return fontStyle && (style.fontStyle = fontStyle), textTransform && (style.textTransform = textTransform), fontFamily && (style.fontFamily = fontFamily), fontWeight && (style.fontWeight = fontWeight), letterSpacing && (style.letterSpacing = letterSpacing), fontSize && (style.fontSize = fontSize), lineHeight && (style.lineHeight = lineHeight), color && (style.color = color), process.env.NODE_ENV === \"development\" && props.debug && props.debug === \"verbose\" && (console.groupCollapsed(\"  \\u{1F539} getFontSized\", sizeTokenIn, sizeToken), isClient && console.info({\n      style,\n      props,\n      font\n    }), console.groupEnd()), style;\n  },\n  cache = /* @__PURE__ */new WeakMap();\nfunction getDefaultSizeToken(font) {\n  if (typeof font == \"object\" && cache.has(font)) return cache.get(font);\n  const sizeTokens = \"$true\" in font.size ? font.size : getTokens().size,\n    sizeDefault = sizeTokens.$true,\n    sizeDefaultSpecific = sizeDefault ? Object.keys(sizeTokens).find(x => x !== \"$true\" && sizeTokens[x].val === sizeDefault.val) : null;\n  return !sizeDefault || !sizeDefaultSpecific ? (process.env.NODE_ENV === \"development\" && console.warn(`No default size is set in your tokens for the \"true\" key, fonts will be inconsistent.\n\n      Fix this by having consistent tokens across fonts and sizes and setting a true key for your size tokens, or\n      set true keys for all your font tokens: \"size\", \"lineHeight\", \"fontStyle\", etc.`), Object.keys(font.size)[3]) : (cache.set(font, sizeDefaultSpecific), sizeDefaultSpecific);\n}\nexport { getFontSized };\n//# sourceMappingURL=index.mjs.map\n","import { getTokens, isVariable } from \"@tamagui/web\";\nconst defaultOptions = {\n    shift: 0,\n    bounds: [0]\n  },\n  getSize = (size, options) => getTokenRelative(\"size\", size, options),\n  getSpace = (space, options) => getTokenRelative(\"space\", space, options),\n  getRadius = (radius, options) => getTokenRelative(\"radius\", radius, options),\n  cacheVariables = {},\n  cacheWholeVariables = {},\n  cacheKeys = {},\n  cacheWholeKeys = {},\n  stepTokenUpOrDown = (type, current, options = defaultOptions) => {\n    const tokens = getTokens({\n      prefixed: !0\n    })[type];\n    if (!(type in cacheVariables)) {\n      cacheKeys[type] = [], cacheVariables[type] = [], cacheWholeKeys[type] = [], cacheWholeVariables[type] = [];\n      const sorted = Object.keys(tokens).map(k => tokens[k]).sort((a, b) => a.val - b.val);\n      for (const token of sorted) cacheKeys[type].push(token.key), cacheVariables[type].push(token);\n      const sortedExcludingHalfSteps = sorted.filter(x => !x.key.endsWith(\".5\"));\n      for (const token of sortedExcludingHalfSteps) cacheWholeKeys[type].push(token.key), cacheWholeVariables[type].push(token);\n    }\n    const isString = typeof current == \"string\",\n      tokensOrdered = (options.excludeHalfSteps ? isString ? cacheWholeKeys : cacheWholeVariables : isString ? cacheKeys : cacheVariables)[type],\n      min = options.bounds?.[0] ?? 0,\n      max = options.bounds?.[1] ?? tokensOrdered.length - 1,\n      currentIndex = tokensOrdered.indexOf(current);\n    let shift = options.shift || 0;\n    shift && (current === \"$true\" || isVariable(current) && current.name === \"true\") && (shift += shift > 0 ? 1 : -1);\n    const index = Math.min(max, Math.max(min, currentIndex + shift)),\n      found = tokensOrdered[index];\n    return (typeof found == \"string\" ? tokens[found] : found) || tokens.$true;\n  },\n  getTokenRelative = stepTokenUpOrDown;\nexport { getRadius, getSize, getSpace, getTokenRelative, stepTokenUpOrDown };\n//# sourceMappingURL=index.mjs.map\n","export * from \"@tamagui/helpers\";\nexport * from \"./prevent.mjs\";\nexport * from \"./useCurrentColor.mjs\";\nexport * from \"./useGetThemedIcon.mjs\";\n//# sourceMappingURL=index.mjs.map\n","const prevent = e => [e.preventDefault(), e.stopPropagation()];\nexport { prevent };\n//# sourceMappingURL=prevent.mjs.map\n","import { getVariable, useTheme } from \"@tamagui/web\";\nconst useCurrentColor = colorProp => {\n  const theme = useTheme();\n  return colorProp ? getVariable(colorProp) : theme[colorProp]?.get() || theme.color?.get();\n};\nexport { useCurrentColor };\n//# sourceMappingURL=useCurrentColor.mjs.map\n","import React from \"react\";\nimport { useCurrentColor } from \"./useCurrentColor.mjs\";\nconst useGetThemedIcon = props => {\n  const color = useCurrentColor(props.color);\n  return el => el && (React.isValidElement(el) ? React.cloneElement(el, {\n    ...props,\n    color,\n    // @ts-expect-error\n    ...el.props\n  }) : React.createElement(el, props));\n};\nexport { useGetThemedIcon };\n//# sourceMappingURL=useGetThemedIcon.mjs.map\n","const shorthands = {\n  // web-only\n  ussel: \"userSelect\",\n  cur: \"cursor\",\n  // tamagui\n  pe: \"pointerEvents\",\n  // text\n  col: \"color\",\n  ff: \"fontFamily\",\n  fos: \"fontSize\",\n  fost: \"fontStyle\",\n  fow: \"fontWeight\",\n  ls: \"letterSpacing\",\n  lh: \"lineHeight\",\n  ta: \"textAlign\",\n  tt: \"textTransform\",\n  ww: \"wordWrap\",\n  // view\n  ac: \"alignContent\",\n  ai: \"alignItems\",\n  als: \"alignSelf\",\n  b: \"bottom\",\n  bc: \"backgroundColor\",\n  bg: \"backgroundColor\",\n  bbc: \"borderBottomColor\",\n  bblr: \"borderBottomLeftRadius\",\n  bbrr: \"borderBottomRightRadius\",\n  bbw: \"borderBottomWidth\",\n  blc: \"borderLeftColor\",\n  blw: \"borderLeftWidth\",\n  boc: \"borderColor\",\n  br: \"borderRadius\",\n  bs: \"borderStyle\",\n  brw: \"borderRightWidth\",\n  brc: \"borderRightColor\",\n  btc: \"borderTopColor\",\n  btlr: \"borderTopLeftRadius\",\n  btrr: \"borderTopRightRadius\",\n  btw: \"borderTopWidth\",\n  bw: \"borderWidth\",\n  dsp: \"display\",\n  f: \"flex\",\n  fb: \"flexBasis\",\n  fd: \"flexDirection\",\n  fg: \"flexGrow\",\n  fs: \"flexShrink\",\n  fw: \"flexWrap\",\n  h: \"height\",\n  jc: \"justifyContent\",\n  l: \"left\",\n  m: \"margin\",\n  mah: \"maxHeight\",\n  maw: \"maxWidth\",\n  mb: \"marginBottom\",\n  mih: \"minHeight\",\n  miw: \"minWidth\",\n  ml: \"marginLeft\",\n  mr: \"marginRight\",\n  mt: \"marginTop\",\n  mx: \"marginHorizontal\",\n  my: \"marginVertical\",\n  o: \"opacity\",\n  ov: \"overflow\",\n  p: \"padding\",\n  pb: \"paddingBottom\",\n  pl: \"paddingLeft\",\n  pos: \"position\",\n  pr: \"paddingRight\",\n  pt: \"paddingTop\",\n  px: \"paddingHorizontal\",\n  py: \"paddingVertical\",\n  r: \"right\",\n  shac: \"shadowColor\",\n  shar: \"shadowRadius\",\n  shof: \"shadowOffset\",\n  shop: \"shadowOpacity\",\n  t: \"top\",\n  w: \"width\",\n  zi: \"zIndex\"\n};\nshorthands.bls = \"borderLeftStyle\";\nshorthands.brs = \"borderRightStyle\";\nshorthands.bts = \"borderTopStyle\";\nshorthands.bbs = \"borderBottomStyle\";\nshorthands.bxs = \"boxSizing\";\nshorthands.bxsh = \"boxShadow\";\nshorthands.ox = \"overflowX\";\nshorthands.oy = \"overflowY\";\nexport { shorthands };\n//# sourceMappingURL=index.mjs.map\n","import React from \"react\";\nconst ButtonNestingContext = React.createContext(!1);\nexport { ButtonNestingContext };\n//# sourceMappingURL=NestingContext.mjs.map\n","import { styled } from \"@tamagui/core\";\nimport { YStack } from \"./Stacks.mjs\";\nimport { bordered, circular, elevate, focusTheme, hoverTheme, padded, pressTheme, radiused } from \"./variants.mjs\";\nconst chromelessStyle = {\n    backgroundColor: \"transparent\",\n    borderColor: \"transparent\",\n    shadowColor: \"transparent\",\n    hoverStyle: {\n      borderColor: \"transparent\"\n    }\n  },\n  themeableVariants = {\n    backgrounded: {\n      true: {\n        backgroundColor: \"$background\"\n      }\n    },\n    radiused,\n    hoverTheme,\n    pressTheme,\n    focusTheme,\n    circular,\n    padded,\n    elevate,\n    bordered,\n    transparent: {\n      true: {\n        backgroundColor: \"transparent\"\n      }\n    },\n    chromeless: {\n      true: chromelessStyle,\n      all: {\n        ...chromelessStyle,\n        hoverStyle: chromelessStyle,\n        pressStyle: chromelessStyle,\n        focusStyle: chromelessStyle\n      }\n    }\n  },\n  ThemeableStack = styled(YStack, {\n    variants: themeableVariants\n  });\nexport { ThemeableStack, themeableVariants };\n//# sourceMappingURL=ThemeableStack.mjs.map\n","import { getElevation } from \"./getElevation.mjs\";\nconst elevate = {\n    true: (_, extras) => getElevation(extras.props.size, extras)\n  },\n  bordered = (val, {\n    props\n  }) => ({\n    // TODO size it with size in '...size'\n    borderWidth: typeof val == \"number\" ? val : 1,\n    borderColor: \"$borderColor\",\n    ...(props.hoverTheme && {\n      hoverStyle: {\n        borderColor: \"$borderColorHover\"\n      }\n    }),\n    ...(props.pressTheme && {\n      pressStyle: {\n        borderColor: \"$borderColorPress\"\n      }\n    }),\n    ...(props.focusTheme && {\n      focusStyle: {\n        borderColor: \"$borderColorFocus\"\n      }\n    })\n  }),\n  padded = {\n    true: (_, extras) => {\n      const {\n        tokens,\n        props\n      } = extras;\n      return {\n        padding: tokens.space[props.size] || tokens.space.$true\n      };\n    }\n  },\n  radiused = {\n    true: (_, extras) => {\n      const {\n        tokens,\n        props\n      } = extras;\n      return {\n        borderRadius: tokens.radius[props.size] || tokens.radius.$true\n      };\n    }\n  },\n  circularStyle = {\n    borderRadius: 1e5,\n    padding: 0\n  },\n  circular = {\n    true: (_, {\n      props,\n      tokens\n    }) => {\n      if (!(\"size\" in props)) return circularStyle;\n      const size = typeof props.size == \"number\" ? props.size : tokens.size[props.size];\n      return {\n        ...circularStyle,\n        width: size,\n        height: size,\n        maxWidth: size,\n        maxHeight: size,\n        minWidth: size,\n        minHeight: size\n      };\n    }\n  },\n  hoverTheme = {\n    true: {\n      hoverStyle: {\n        backgroundColor: \"$backgroundHover\",\n        borderColor: \"$borderColorHover\"\n      }\n    },\n    false: {}\n  },\n  pressTheme = {\n    true: {\n      cursor: \"pointer\",\n      pressStyle: {\n        backgroundColor: \"$backgroundPress\",\n        borderColor: \"$borderColorPress\"\n      }\n    },\n    false: {}\n  },\n  focusTheme = {\n    true: {\n      focusStyle: {\n        backgroundColor: \"$backgroundFocus\",\n        borderColor: \"$borderColorFocus\"\n      }\n    },\n    false: {}\n  };\nexport { bordered, circular, elevate, focusTheme, hoverTheme, padded, pressTheme, radiused };\n//# sourceMappingURL=variants.mjs.map\n","import { getFontSized } from \"@tamagui/get-font-sized\";\nimport { Text, styled } from \"@tamagui/web\";\nconst SizableText = styled(Text, {\n  name: \"SizableText\",\n  fontFamily: \"$body\",\n  variants: {\n    unstyled: {\n      false: {\n        size: \"$true\",\n        color: \"$color\"\n      }\n    },\n    size: getFontSized\n  },\n  defaultVariants: {\n    unstyled: process.env.TAMAGUI_HEADLESS === \"1\"\n  }\n});\nSizableText.staticConfig.variants.fontFamily = {\n  \"...\": (_val, extras) => {\n    const sizeProp = extras.props.size,\n      fontSizeProp = extras.props.fontSize,\n      size = sizeProp === \"$true\" && fontSizeProp ? fontSizeProp : extras.props.size || \"$true\";\n    return getFontSized(size, extras);\n  }\n};\nexport { SizableText };\n//# sourceMappingURL=SizableText.mjs.map\n","import React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction wrapChildrenInText(TextComponent, propsIn, extraProps) {\n  const {\n    children,\n    textProps,\n    size,\n    noTextWrap,\n    color,\n    fontFamily,\n    fontSize,\n    fontWeight,\n    letterSpacing,\n    textAlign,\n    fontStyle,\n    maxFontSizeMultiplier\n  } = propsIn;\n  if (noTextWrap || !children) return [children];\n  const props = {\n    ...extraProps\n  };\n  return color && (props.color = color), fontFamily && (props.fontFamily = fontFamily), fontSize && (props.fontSize = fontSize), fontWeight && (props.fontWeight = fontWeight), letterSpacing && (props.letterSpacing = letterSpacing), textAlign && (props.textAlign = textAlign), size && (props.size = size), fontStyle && (props.fontStyle = fontStyle), maxFontSizeMultiplier && (props.maxFontSizeMultiplier = maxFontSizeMultiplier), React.Children.toArray(children).map((child, index) => typeof child == \"string\" ?\n  // so \"data-disable-theme\" is a hack to fix themeInverse, don't ask me why\n  /* @__PURE__ */\n  jsx(TextComponent, {\n    ...props,\n    ...textProps,\n    children: child\n  }, index) : child);\n}\nexport { wrapChildrenInText };\n//# sourceMappingURL=wrapChildrenInText.mjs.map\n"],"names":[],"sourceRoot":""}